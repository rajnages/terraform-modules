pipeline {
    agent any

    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'prod'],
            description: 'Target environment for deployment'
        )
    }

    environment {
        AWS_CREDENTIALS = credentials('cred')
        TERRAFORM_DIR = '.'
        VAR_FILES_DIR = './env-files'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Initialize Terraform') {
            steps {
                script {
                    dir(TERRAFORM_DIR) {
                        // Initialize Terraform backend and providers
                        sh '''
                            terraform init \
                                -input=false \
                                -backend=true
                        '''

                        // Configure workspace
                        def workspace = params.ENVIRONMENT
                        sh """
                            terraform workspace select ${workspace} || \
                            terraform workspace new ${workspace}
                        """
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    dir(TERRAFORM_DIR) {
                        def varFile = "${VAR_FILES_DIR}/${params.ENVIRONMENT}.tfvars"

                        // Generate and save plan
                        sh """
                            terraform plan \
                                -input=false \
                                -var-file=${varFile} \
                                -out=tfplan
                        """
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    dir(TERRAFORM_DIR) {
                        // Apply saved plan
                        sh 'terraform apply -input=false -auto-approve tfplan'
                    }
                }
            }
        }

        stage('Post-Deployment Validation') {
            when {
                expression { params.ENVIRONMENT == 'prod' }
            }
            steps {
                script {
                    // Health checks and validation
                    sh '''
                        echo "Validating deployment..."
                        # Add validation commands here
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }

        success {
            script {
                def message = "Deployment to ${params.ENVIRONMENT} completed successfully"
                echo message
                // Add notification integration here
            }
        }

        failure {
            script {
                def message = "Deployment to ${params.ENVIRONMENT} failed"
                echo message
                // Add failure notification and rollback procedures here
            }
        }
    }
}
