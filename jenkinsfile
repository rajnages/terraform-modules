properties([
    parameters([
        choice(
            choices: ['dev','prod'],
            name: 'Environment'
        ),
        choice(
            choices: ['plan', 'apply', 'destroy'],
            name: 'Terraform_Action'
        )
    ])
])
pipeline {
    agent any
    stages {
        stage('Preparing') {
            steps {
                sh 'echo Preparing'
            }
        }
        stage('Git Pulling') {
            steps {
                git branch: 'main', url: 'https://github.com/rajnages/terraform-modules.git'
            }
        }
        stage('Init') {
            steps {
                withAWS(credentials: 'cred', region: 'us-east-1') {
                    sh 'terraform init'
                }
            }
        }
        stage('Create and Select Workspace') {
            steps {
                withAWS(credentials: 'cred', region: 'us-east-1') {
                    script {
                        def workspace = params.Environment
                        // Check if the workspace exists, create if not, then select it
                        sh """
                            terraform workspace new ${workspace} || terraform workspace select ${workspace}
                        """
                    }
                }
            }
        }
        stage('Validate') {
            steps {
                withAWS(credentials: 'cred', region: 'us-east-1') {
                    sh 'terraform validate'
                }
            }
        }
        stage('Action') {
            steps {
                withAWS(credentials: 'cred', region: 'us-east-1') {
                    script {
                        if (params.Terraform_Action == 'plan') {
                            sh "terraform plan -var-file=env-files/${params.Environment}.tfvars"
                        } else if (params.Terraform_Action == 'apply') {
                            sh "terraform apply -var-file=env-files/${params.Environment}.tfvars -auto-approve"
                        } else if (params.Terraform_Action == 'destroy') {
                            sh "terraform destroy -var-file=env-files/${params.Environment}.tfvars -auto-approve"
                        } else {
                            error "Invalid value for Terraform_Action: ${params.Environment}"
                        }
                    }
                }
            }
        }
    }
}
