pipeline {
    agent any
    
    parameters {
        // Choice parameter for selecting environment
        choice(name: 'ENVIRONMENT', choices: ['dev', 'prod'], description: 'Choose the environment for deployment')
    }

    environment {
        // AWS credentials (if needed)
        AWS_CREDENTIALS = credentials('creds')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Initialize Terraform') {
            steps {
                script {
                    // Initialize Terraform and set the workspace based on the selected environment
                    def environment = params.ENVIRONMENT
                    
                    // Initialize Terraform only once
                    sh 'terraform init'

                    // Set Terraform workspace dynamically
                    if (environment == 'dev') {
                        sh 'terraform workspace select dev || terraform workspace new dev'
                    } else if (environment == 'prod') {
                        sh 'terraform workspace select prod || terraform workspace new prod'
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    // Apply Terraform changes based on the selected environment
                    def environment = params.ENVIRONMENT
                    def varFile = environment == 'dev' ? './env-file/dev.tfvars' : './env-file/prod.tfvars'
                    sh "terraform apply --auto-approve -var-file=${varFile}"
                }
            }
        }

        stage('Post-Deployment') {
            when {
                expression {
                    // Only run post-deployment tasks for 'prod'
                    return params.ENVIRONMENT == 'prod'
                }
            }
            steps {
                echo "Running post-deployment tasks for production environment."
                // Add further steps like notifying teams or triggering additional processes
            }
        }
    }

    post {
        always {
            // Always perform cleanup or notifications, if needed
            echo "Cleaning up or finalizing the process."
        }
        
        success {
            echo "Deployment succeeded for environment: ${params.ENVIRONMENT}"
        }
        
        failure {
            echo "Deployment failed for environment: ${params.ENVIRONMENT}"
            // You could notify the team or roll back changes, depending on your needs
        }
    }
}
